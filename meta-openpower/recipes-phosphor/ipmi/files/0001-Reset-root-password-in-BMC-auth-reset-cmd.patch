From 2e77af33efcecd3a4995e9625df95f5539ff5a4d Mon Sep 17 00:00:00 2001
From: Matt Spinler <spinler@us.ibm.com>
Date: Tue, 2 Oct 2018 15:56:09 -0500
Subject: [PATCH 1/1] Reset root password in BMC auth reset cmd

Resets the root password back to the default one
used on OpenBMC systems.  It uses the pam_unix module
to change the password in /etc/shadow.

As a reminder, this IPMI command is not on the host
IPMI whitelist, so if a user wants to prevent the host
from running this command, the OEM command to turn on
whitelisting should be used.

Change-Id: Ie64fcc6ed564398802fe31690cebd52f8ae0eacc
Signed-off-by: Matt Spinler <spinler@us.ibm.com>
---
 Makefile.am     |  2 ++
 configure.ac    |  5 ++++
 local_users.cpp | 93 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 local_users.hpp |  9 ++++++
 oemhandler.cpp  | 13 +++++++-
 5 files changed, 121 insertions(+), 1 deletion(-)

diff --git a/Makefile.am b/Makefile.am
index 3d369a0..7ea7a69 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -13,6 +13,8 @@ liboemhandler_la_LDFLAGS = $(SYSTEMD_LIBS)\
                            $(SDBUSPLUS_LIBS) \
                            $(OPENPOWER_DBUS_INTERFACES_LIBS) \
                            $(PHOSPHOR_LOGGING_LIBS) \
+                           -lpam \
+                           -lpam_misc \
                            -version-info 0:0:0 -shared
 
 liboemhandler_la_CXXFLAGS = $(SYSTEMD_CFLAGS) \
diff --git a/configure.ac b/configure.ac
index dcf3b5f..1a59121 100644
--- a/configure.ac
+++ b/configure.ac
@@ -78,6 +78,11 @@ AC_DEFINE(MAPPER_OBJ, "/xyz/openbmc_project/object_mapper",
 AC_DEFINE(MAPPER_IFACE, "xyz.openbmc_project.ObjectMapper",
           [The object mapper interface])
 
+AC_ARG_VAR(DEFAULT_PW, [Default PW])
+AS_IF([test "x$DEFAULT_PW" == "x"],
+      [DEFAULT_PW="0penBmc"])
+AC_DEFINE_UNQUOTED([DEFAULT_PW], ["$DEFAULT_PW"], [Default PW])
+
 # Create configured output.
 AC_CONFIG_FILES([Makefile])
 AC_OUTPUT
diff --git a/local_users.cpp b/local_users.cpp
index aa6519c..75d4b1e 100644
--- a/local_users.cpp
+++ b/local_users.cpp
@@ -2,6 +2,9 @@
 #include "local_users.hpp"
 #include <host-ipmid/ipmid-host-cmd.hpp>
 #include <phosphor-logging/log.hpp>
+#include <security/pam_misc.h>
+#include <security/pam_appl.h>
+#include <iostream>
 
 namespace local
 {
@@ -19,6 +22,15 @@ using DbusInterface = std::string;
 using ObjectTree = std::map<DbusObjectPath,
                             std::map<DbusService, std::vector<DbusInterface>>>;
 
+constexpr auto pamService = "passwd";
+
+pam_response* respData = NULL;
+
+struct Password
+{
+    const char* newPassword;
+};
+
 /**
  * @brief Gets a list of all local users in the form of GetSubTree
  *        results.
@@ -107,5 +119,86 @@ ipmi_ret_t enableUsers()
     return IPMI_CC_OK;
 }
 
+/**
+ * PAM conversation function for changing the password.
+ * This is called by the PAM modules.
+ *
+ * @param[in] nMsg - number of messages in next argument
+ * @param[in] msg - array of pam_message pointers
+ * @param[out] resp - array of response objects
+ * @param[in] appPtr - application data pointer
+ *
+ * @return PAM_SUCCESS
+ */
+int changePassword(int nMsg, const pam_message** msg,
+                   pam_response** resp, void* appPtr)
+{
+    auto appData = static_cast<Password*>(appPtr);
+    respData = static_cast<pam_response*>(calloc(nMsg, sizeof(pam_response)));
+
+    memset(respData, 0, sizeof(pam_response) * nMsg);
+    *resp = respData;
+
+    for (int i = 0; i < nMsg; i++)
+    {
+        if (msg[0]->msg_style == PAM_PROMPT_ECHO_OFF)
+        {
+            respData[i].resp = strdup(appData->newPassword);
+        }
+    }
+    respData->resp_retcode = 0;
+
+    return PAM_SUCCESS;
+}
+
+ipmi_ret_t resetRootPassword()
+{
+    ipmi_ret_t ipmiRC = IPMI_CC_OK;
+    pam_conv conv;
+    pam_handle_t* pamh = nullptr;
+    Password appData;
+    int rc;
+
+    appData.newPassword = DEFAULT_PW;
+
+    conv.appdata_ptr = static_cast<void*>(&appData);
+    conv.conv = changePassword;
+
+    try
+    {
+        rc = pam_start(pamService, "root", &conv, &pamh);
+        if (rc != PAM_SUCCESS)
+        {
+            log<level::ERR>("pam_start failed",
+                    entry("RC=%d\n", rc));
+            throw std::exception();
+        }
+
+        rc = pam_chauthtok(pamh, 0);
+        if (rc != PAM_SUCCESS)
+        {
+            log<level::ERR>("pam_chauthtok failed",
+                    entry("RC=%d\n", rc));
+            throw std::exception();
+        }
+    }
+    catch (std::exception& e)
+    {
+        ipmiRC = IPMI_CC_UNSPECIFIED_ERROR;
+    }
+
+    if (pamh)
+    {
+        rc = pam_end(pamh, PAM_SUCCESS);
+        if (rc != PAM_SUCCESS)
+        {
+            log<level::INFO>("pam_end failed",
+                    entry("RC=%d", rc));
+        }
+    }
+
+    return ipmiRC;
+}
+
 }
 }
diff --git a/local_users.hpp b/local_users.hpp
index e447a25..7d624ad 100644
--- a/local_users.hpp
+++ b/local_users.hpp
@@ -17,5 +17,14 @@ namespace users
  */
 ipmi_ret_t enableUsers();
 
+
+/**
+ * Resets the root password back to the default one
+ * using PAM.
+ *
+ * @return ipmi_ret_t - IPMI_CC_SUCCESS if successful
+ */
+ipmi_ret_t resetRootPassword();
+
 }
 }
diff --git a/oemhandler.cpp b/oemhandler.cpp
index c793941..ce28d45 100644
--- a/oemhandler.cpp
+++ b/oemhandler.cpp
@@ -211,10 +211,21 @@ ipmi_ret_t ipmi_ibm_oem_reset_bmc_auth(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
                                        ipmi_context_t context)
 {
     ipmi_ret_t rc;
+    ipmi_ret_t finalRC = IPMI_CC_OK;
 
     rc = local::users::enableUsers();
+    if (rc != IPMI_CC_OK)
+    {
+        finalRC = rc;
+    }
 
-    return rc;
+    rc = local::users::resetRootPassword();
+    if (rc != IPMI_CC_OK)
+    {
+        finalRC = rc;
+    }
+
+    return finalRC;
 }
 
 namespace {
-- 
1.8.3.1

