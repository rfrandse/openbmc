From 2effe54f7a718c55cd8c6dff7329e23a2ea81e8e Mon Sep 17 00:00:00 2001
From: Matt Spinler <spinler@us.ibm.com>
Date: Wed, 17 Oct 2018 14:17:06 -0500
Subject: [PATCH 1/1] Delete LDAP user objects in BMC auth reset cmd

In addition to deleting the LDAP configuration object,
also delete any /xyz/openbmc_project/user/ldap/X objects.

Change-Id: I1ff4289fcf1e928ecf021a57f669c88b6bd925e0
Signed-off-by: Matt Spinler <spinler@us.ibm.com>
---
 ldap.cpp        | 110 ++++++++++++++++++++++++++++++++++++++++++++++++++++----
 ldap.hpp        |   3 +-
 local_users.cpp |   8 ++---
 types.hpp       |  16 +++++++++
 4 files changed, 124 insertions(+), 13 deletions(-)
 create mode 100644 types.hpp

diff --git a/ldap.cpp b/ldap.cpp
index 45dbbcd..d49d637 100644
--- a/ldap.cpp
+++ b/ldap.cpp
@@ -1,5 +1,6 @@
 #include "config.h"
 #include "ldap.hpp"
+#include "types.hpp"
 #include <host-ipmid/ipmid-host-cmd.hpp>
 #include <phosphor-logging/log.hpp>
 
@@ -11,8 +12,14 @@ static constexpr auto deleteIface = "xyz.openbmc_project.Object.Delete";
 static constexpr auto deleteMethod = "Delete";
 
 using namespace phosphor::logging;
+using namespace util;
 
-ipmi_ret_t deleteConfig()
+/**
+ * Delete the LDAP configuration object
+ *
+ * @return ipmi_ret_t - IPMI_CC_SUCCESS if successful
+ */
+ipmi_ret_t deleteConfigObject()
 {
     auto& bus = ipmid_get_sdbus_plus_handler();
     std::string service;
@@ -52,11 +59,6 @@ ipmi_ret_t deleteConfig()
                                            deleteIface,
                                            deleteMethod);
         auto reply = bus->call(method);
-        if (reply.is_method_error())
-        {
-            log<level::ERR>("Method error on LDAP delete config call");
-            return IPMI_CC_UNSPECIFIED_ERROR;
-        }
     }
     catch (sdbusplus::exception::SdBusError& e)
     {
@@ -68,4 +70,100 @@ ipmi_ret_t deleteConfig()
     return IPMI_CC_OK;
 }
 
+/**
+ * Gets all LDAP users.
+ *
+ * @param[out] users - filled in with the LDAP user
+ *                     object tree information.
+ */
+void getUsers(ObjectTree& users)
+{
+    auto& bus = ipmid_get_sdbus_plus_handler();
+
+    try
+    {
+        auto method = bus->new_method_call(MAPPER_BUS_NAME,
+                                           MAPPER_OBJ,
+                                           MAPPER_IFACE,
+                                           "GetSubTree");
+
+        method.append("/xyz/openbmc_project/user/ldap", 0,
+                      std::vector<std::string>{});
+
+        auto reply = bus->call(method);
+
+        reply.read(users);
+    }
+    catch (sdbusplus::exception::SdBusError& e)
+    {
+        // No LDAP users
+    }
+}
+
+/**
+ * Deletes the object path passed in.
+ *
+ * @param[in] path - the object path
+ * @param[in] service - the service that owns the object
+ */
+void deleteUser(const std::string& path, const std::string& service)
+{
+    auto& bus = ipmid_get_sdbus_plus_handler();
+
+    auto method = bus->new_method_call(service.c_str(),
+                                       path.c_str(),
+                                       deleteIface,
+                                       deleteMethod);
+    auto reply = bus->call(method);
+}
+
+/**
+ *  Deletes all LDAP users, which are the D-Bus objects under
+ *  /xyz/openbmc_project/user/ldap/.
+ *
+ * @return ipmi_ret_t - IPMI_CC_SUCCESS if successful
+ */
+ipmi_ret_t deleteUsers()
+{
+    ObjectTree users;
+
+    try
+    {
+        getUsers(users);
+
+        for (const auto& user : users)
+        {
+            deleteUser(user.first, user.second.begin()->first);
+        }
+    }
+    catch (std::exception& e)
+    {
+        log<level::ERR>("Failed deleting LDAP users",
+                         entry("ERROR=%s", e.what()));
+        return IPMI_CC_UNSPECIFIED_ERROR;
+    }
+
+    return IPMI_CC_OK;
+}
+
+// See header file for prologue
+ipmi_ret_t deleteConfig()
+{
+    ipmi_ret_t finalRC = IPMI_CC_OK;
+
+    auto rc = deleteConfigObject();
+    if (rc != IPMI_CC_OK)
+    {
+        finalRC = rc;
+    }
+
+    rc = deleteUsers();
+    if (rc != IPMI_CC_OK)
+    {
+        finalRC = rc;
+    }
+
+    return finalRC;
+}
+
 }
diff --git a/ldap.hpp b/ldap.hpp
index f392e64..a915809 100644
--- a/ldap.hpp
+++ b/ldap.hpp
@@ -4,7 +4,8 @@
 namespace ldap
 {
     /**
-     * Deletes the LDAP configuration object, if present
+     * Deletes the LDAP configuration object and any LDAP
+     * user objects.
      *
      * @return ipmi_ret_t - IPMI_CC_SUCCESS if successful
      */
diff --git a/local_users.cpp b/local_users.cpp
index 75d4b1e..d2420a1 100644
--- a/local_users.cpp
+++ b/local_users.cpp
@@ -1,5 +1,6 @@
 #include "config.h"
 #include "local_users.hpp"
+#include "types.hpp"
 #include <host-ipmid/ipmid-host-cmd.hpp>
 #include <phosphor-logging/log.hpp>
 #include <security/pam_misc.h>
@@ -12,16 +13,11 @@ namespace users
 {
 
 using namespace phosphor::logging;
+using namespace util;
 
 constexpr auto userIface = "xyz.openbmc_project.User.Attributes";
 constexpr auto propIface = "org.freedesktop.DBus.Properties";
 
-using DbusObjectPath = std::string;
-using DbusService = std::string;
-using DbusInterface = std::string;
-using ObjectTree = std::map<DbusObjectPath,
-                            std::map<DbusService, std::vector<DbusInterface>>>;
-
 constexpr auto pamService = "passwd";
 
 pam_response* respData = NULL;
diff --git a/types.hpp b/types.hpp
new file mode 100644
index 0000000..88a0ac5
--- /dev/null
+++ b/types.hpp
@@ -0,0 +1,16 @@
+#pragma once
+
+#include <map>
+#include <string>
+#include <vector>
+
+namespace util
+{
+
+using DbusObjectPath = std::string;
+using DbusService = std::string;
+using DbusInterface = std::string;
+using ObjectTree = std::map<DbusObjectPath,
+                            std::map<DbusService, std::vector<DbusInterface>>>;
+
+}
-- 
1.8.3.1

