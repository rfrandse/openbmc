From 4f05ddc71507eb495f4e3503bd5de9a876ee2359 Mon Sep 17 00:00:00 2001
From: Adriana Kobylak <anoo@us.ibm.com>
Date: Tue, 9 Oct 2018 15:26:44 -0500
Subject: [PATCH 1/2] msl_verify: Initial commit

Create a new binary that checks the msl (minimum ship level)
of the PNOR and logs an error message if the version on the
system is older. The msl can be specified via a config flag.

Change-Id: I6f477400f7a8cf56557bd0caf5d6e08d73320028
Signed-off-by: Adriana Kobylak <anoo@us.ibm.com>
---
 Makefile.am    |   8 ++-
 configure.ac   |   9 ++++
 msl_verify.cpp | 165 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 181 insertions(+), 1 deletion(-)
 create mode 100644 msl_verify.cpp

diff --git a/Makefile.am b/Makefile.am
index 0f05061..7cb74f6 100755
--- a/Makefile.am
+++ b/Makefile.am
@@ -3,7 +3,8 @@ AM_DEFAULT_SOURCE_EXT = .cpp
 ACLOCAL_AMFLAGS = -Im4
 
 sbin_PROGRAMS = \
-	openpower-update-manager
+	openpower-update-manager \
+	openpower-pnor-msl
 
 openpower_update_manager_SOURCES = \
 	activation.cpp \
@@ -22,6 +23,9 @@ endif
 nodist_openpower_update_manager_SOURCES = \
 	org/openbmc/Associations/server.cpp
 
+openpower_pnor_msl_SOURCES = \
+	msl_verify.cpp
+
 CLEANFILES = \
 	org/openbmc/Associations/server.cpp \
 	org/openbmc/Associations/server.hpp
@@ -55,5 +59,7 @@ org/openbmc/Associations/server.hpp: org/openbmc/Associations.interface.yaml
 
 openpower_update_manager_CXXFLAGS = $(generic_cxxflags)
 openpower_update_manager_LDFLAGS = $(generic_ldflags)
+openpower_pnor_msl_CXXFLAGS = $(generic_cxxflags)
+openpower_pnor_msl_LDFLAGS = $(generic_ldflags)
 
 SUBDIRS = test
diff --git a/configure.ac b/configure.ac
index 7153727..95b70e3 100755
--- a/configure.ac
+++ b/configure.ac
@@ -151,5 +151,14 @@ AC_ARG_VAR(ACTIVE_PNOR_MAX_ALLOWED, [The maximum allowed active pnor versions])
 AS_IF([test "x$ACTIVE_PNOR_MAX_ALLOWED" == "x"], [ACTIVE_PNOR_MAX_ALLOWED=2])
 AC_DEFINE_UNQUOTED([ACTIVE_PNOR_MAX_ALLOWED], [$ACTIVE_PNOR_MAX_ALLOWED], [The maximum allowed active pnor versions])
 
+AC_ARG_VAR(PNOR_MSL, [The PNOR minimum ship level])
+AS_IF([test "x$PNOR_MSL" == "x"], [PNOR_MSL=""])
+AC_DEFINE_UNQUOTED([PNOR_MSL], ["$PNOR_MSL"], [The PNOR minimum ship level])
+
+AC_ARG_VAR(PNOR_VERSION_PARTITION, [The name of the PNOR version partition])
+AS_IF([test "x$PNOR_VERSION_PARTITION" == "x"], [PNOR_VERSION_PARTITION="VERSION"])
+AC_DEFINE_UNQUOTED([PNOR_VERSION_PARTITION], ["$PNOR_VERSION_PARTITION"],
+    [The name of the PNOR version partition])
+
 AC_CONFIG_FILES([Makefile test/Makefile])
 AC_OUTPUT
diff --git a/msl_verify.cpp b/msl_verify.cpp
new file mode 100644
index 0000000..d4a73ab
--- /dev/null
+++ b/msl_verify.cpp
@@ -0,0 +1,165 @@
+#include "config.h"
+
+#include <experimental/filesystem>
+#include <fstream>
+#include <phosphor-logging/log.hpp>
+#include <regex>
+
+namespace openpower
+{
+namespace software
+{
+namespace msl
+{
+
+namespace fs = std::experimental::filesystem;
+using namespace phosphor::logging;
+
+struct Version_t
+{
+    uint32_t major;
+    uint32_t minor;
+    uint32_t rev;
+};
+
+/**
+ * @brief Compare the versions provided
+ * @param[in] a - The first version to compare
+ * @param[in] b - The second version to compare
+ * @return 0 if a <= b, -1 otherwise.
+ */
+static int compare(const Version_t& a, const Version_t& b)
+{
+    if (a.major > b.major)
+    {
+        return -1;
+    }
+    else if (a.major < b.major)
+    {
+        return 0;
+    }
+
+    if (a.minor > b.minor)
+    {
+        return -1;
+    }
+    else if (a.minor < b.minor)
+    {
+        return 0;
+    }
+
+    if (a.rev > b.rev)
+    {
+        return -1;
+    }
+    else if (a.rev < b.rev)
+    {
+        return 0;
+    }
+
+    return 0;
+}
+
+/**
+ * @brief Parse the version parts into a struct
+ * @details Version format follows a git tag convention: vX.Y[.Z]
+ *          Reference:
+ *          https://github.com/open-power/op-build/blob/master/openpower/package/VERSION.readme
+ * @param[in] version - The version string to be parsed
+ * @param[out] version_t - The version struct to be populated
+ */
+static void parse(const std::string& version, Version_t& version_t)
+{
+    std::smatch match;
+
+    // Match for vX.Y.Z
+    std::regex regex{"v([0-9]+)\\.([0-9]+)\\.([0-9]+)", std::regex::extended};
+
+    if (!std::regex_search(version, match, regex))
+    {
+        // Match for vX.Y
+        std::regex regexShort{"v([0-9]+)\\.([0-9]+)", std::regex::extended};
+        if (!std::regex_search(version, match, regexShort))
+        {
+            log<level::ERR>("Unable to parse PNOR version",
+                            entry("VERSION=%s", version.c_str()));
+            return;
+        }
+    }
+    else
+    {
+        // Populate Z
+        version_t.rev = std::stoi(match[3]);
+    }
+    version_t.major = std::stoi(match[1]);
+    version_t.minor = std::stoi(match[2]);
+}
+
+static std::string getFunctionalPnorVersion()
+{
+    fs::path versionPath(PNOR_RO_ACTIVE_PATH);
+    versionPath /= PNOR_VERSION_PARTITION;
+    if (!fs::is_regular_file(versionPath))
+    {
+        return {};
+    }
+
+    std::ifstream versionFile(versionPath);
+    std::string versionStr;
+    std::getline(versionFile, versionStr);
+
+    return versionStr;
+}
+
+/**
+ * @brief Verify that the current PNOR version meets the min ship level (msl)
+ */
+static void verify()
+{
+    auto min = std::string{PNOR_MSL};
+
+    if (std::string(PNOR_MSL).empty())
+    {
+        return;
+    }
+
+    if (!fs::exists(PNOR_RO_ACTIVE_PATH))
+    {
+        return;
+    }
+
+    auto actual = getFunctionalPnorVersion();
+    if (actual.empty())
+    {
+        return;
+    }
+
+    Version_t min_t = {0, 0, 0};
+    parse(min, min_t);
+
+    Version_t actual_t = {0, 0, 0};
+    parse(actual, actual_t);
+
+    auto rc = compare(min_t, actual_t);
+    if (rc != 0)
+    {
+        log<level::ERR>(
+            "PNOR Mininum Ship Level NOT met",
+            entry("MIN_VERSION=%s", min.c_str()),
+            entry("ACTUAL_VERSION=%s", actual.c_str()),
+            entry("VERSION_PURPOSE=%s",
+                  "xyz.openbmc_project.Software.Version.VersionPurpose.Host"));
+    }
+
+    return;
+}
+} // namespace msl
+} // namespace software
+} // namespace openpower
+
+int main(int argc, char** argv)
+{
+    openpower::software::msl::verify();
+
+    return 0;
+}
-- 
1.8.3.1

