From 84fa7d233b1b1cfea021c7b9b9f0da42946cd681 Mon Sep 17 00:00:00 2001
From: Jayanth Othayoth <ojayanth@in.ibm.com>
Date: Thu, 23 Sep 2021 02:09:50 -0500
Subject: [PATCH] libpdbg_sbe: fix SBE state api's assert

This commit is to fix below assert initiated by SBE state apis'
../git/libpdbg/libpdbg.c:265: require_target_parent: Assertion `parent' failed

SBE state api function input target is pib andin the api implementaion
is trying to get fsi target using pdbg_target_require_parent().
This seems to be wrong because PIB and FSI got same hierarchy under
processor pdbg target.

Refer pdbg/p10.dts.m4#L325 for target device tree details.

Proposed fix is get parent processor target from the PIB and then get
associated fsi child target.

Signed-off-by: Jayanth Othayoth <ojayanth@in.ibm.com>
---
 libpdbg/sbe_api.c | 34 +++++++++++++++++++++++++++++++---
 1 file changed, 31 insertions(+), 3 deletions(-)

diff --git a/libpdbg/sbe_api.c b/libpdbg/sbe_api.c
index 6e1eb4d..64d33c5 100644
--- a/libpdbg/sbe_api.c
+++ b/libpdbg/sbe_api.c
@@ -222,16 +222,34 @@ int sbe_ffdc_get(struct pdbg_target *target, uint32_t *status, uint8_t **ffdc, u
 	return 0;
 }
 
+// Get fsi target from proc type parent target.
+static struct pdbg_target* sbe_get_fsi_target(struct pdbg_target *proc)
+{
+	char path[16];
+	struct pdbg_target *fsi;
+
+	sprintf(path, "/proc%d/fsi", pdbg_target_index(proc));
+	fsi = pdbg_target_from_path(NULL, path);
+	assert(fsi);
+
+	return fsi;
+}
+
 static int sbe_read_msg_register(struct pdbg_target *pib, uint32_t *value)
 {
-	struct pdbg_target *fsi = pdbg_target_require_parent("fsi", pib);
 	int rc;
+	struct pdbg_target *proc, *fsi;
 
 	assert(pdbg_target_is_class(pib, "pib"));
 
 	if (pdbg_target_status(pib) != PDBG_TARGET_ENABLED)
 		return -1;
 
+	//get parent proc target
+	proc = pdbg_target_require_parent("proc", pib);
+	//get fsi traget
+	fsi = sbe_get_fsi_target(proc);
+
 	rc = fsi_read(fsi, SBE_MSG_REG, value);
 	if (rc) {
 		PR_NOTICE("Failed to read sbe mailbox register\n");
@@ -243,14 +261,19 @@ static int sbe_read_msg_register(struct pdbg_target *pib, uint32_t *value)
 
 static int sbe_read_state_register(struct pdbg_target *pib, uint32_t *value)
 {
-	struct pdbg_target *fsi = pdbg_target_require_parent("fsi", pib);
 	int rc;
+	struct pdbg_target *proc, *fsi;
 
 	assert(pdbg_target_is_class(pib, "pib"));
 
 	if (pdbg_target_status(pib) != PDBG_TARGET_ENABLED)
 		return -1;
 
+	//get parent proc target
+	proc = pdbg_target_require_parent("proc", pib);
+	//get fsi traget
+	fsi = sbe_get_fsi_target(proc);
+
 	rc = fsi_read(fsi, SBE_STATE_REG, value);
 	if (rc) {
 		PR_NOTICE("Failed to read sbe state register\n");
@@ -262,14 +285,19 @@ static int sbe_read_state_register(struct pdbg_target *pib, uint32_t *value)
 
 static int sbe_write_state_register(struct pdbg_target *pib, uint32_t value)
 {
-	struct pdbg_target *fsi = pdbg_target_require_parent("fsi", pib);
 	int rc;
+	struct pdbg_target *proc, *fsi;
 
 	assert(pdbg_target_is_class(pib, "pib"));
 
 	if (pdbg_target_status(pib) != PDBG_TARGET_ENABLED)
 		return -1;
 
+	//get parent proc target
+	proc = pdbg_target_require_parent("proc", pib);
+	//get fsi traget
+	fsi = sbe_get_fsi_target(proc);
+
 	rc = fsi_write(fsi, SBE_STATE_REG, value);
 	if (rc) {
 		PR_NOTICE("Failed to write sbe state register\n");
-- 
1.8.3.1

